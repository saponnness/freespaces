# Generated by Django 5.2.6 on 2025-09-08 20:32

from django.db import migrations
from django.utils.text import slugify
from django.utils import timezone


def populate_post_slugs(apps, schema_editor):
    """Populate slug field for existing posts"""
    Post = apps.get_model('posts', 'Post')

    for post in Post.objects.filter(slug__isnull=True).union(Post.objects.filter(slug='')):
        if not post.title:
            # Fallback for empty titles
            base_slug = f'post-{post.id}-{timezone.now().strftime("%Y%m%d")}'
        else:
            # Clean the title and create base slug
            base_slug = slugify(post.title)
            if not base_slug:
                # If slugify returns empty (e.g., title with only special chars)
                base_slug = f'post-{post.id}-{timezone.now().strftime("%Y%m%d")}'

        # Ensure slug is not too long
        if len(base_slug) > 240:  # Leave room for numeric suffix
            base_slug = base_slug[:240]

        # Check for uniqueness and add numeric suffix if needed
        slug = base_slug
        counter = 1
        while Post.objects.filter(slug=slug).exclude(pk=post.pk).exists():
            counter += 1
            slug = f'{base_slug}-{counter}'

        post.slug = slug
        post.save(update_fields=['slug'])


def reverse_populate_post_slugs(apps, schema_editor):
    """Reverse migration - clear slug field"""
    Post = apps.get_model('posts', 'Post')
    Post.objects.update(slug='')


class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0002_post_slug'),
    ]

    operations = [
        migrations.RunPython(populate_post_slugs, reverse_populate_post_slugs),
    ]
